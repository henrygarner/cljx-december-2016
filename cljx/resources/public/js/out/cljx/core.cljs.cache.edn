{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name cljx.core, :imports nil, :requires {thi.ng.geom.viz.core thi.ng.geom.viz.core, cljx.binomial cljx.binomial, viz thi.ng.geom.viz.core, reagent.core reagent.core, r reagent.core, cljx.simulate cljx.simulate, thi.ng.geom.svg.core thi.ng.geom.svg.core, thi.ng.math.core thi.ng.math.core, m thi.ng.math.core, svg thi.ng.geom.svg.core}, :uses {PI thi.ng.math.core}, :defs {beta-distribution {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 126, :column 7, :end-line 126, :end-column 24, :arglists (quote ([{:keys [alpha beta]}]))}, :name cljx.core/beta-distribution, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 24, :method-params ([p__8693]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [alpha beta]}]))}, constrain {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 54, :column 7, :end-line 54, :end-column 16, :arglists (quote ([{:keys [n k], :as state}]))}, :name cljx.core/constrain, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 16, :method-params ([p__8682]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [n k], :as state}]))}, single-binomial-controllers {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 101, :column 7, :end-line 101, :end-column 34, :arglists (quote ([state]))}, :name cljx.core/single-binomial-controllers, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 34, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, randexp {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 13, :column 7, :end-line 13, :end-column 14, :arglists (quote ([lambda]))}, :name cljx.core/randexp, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 14, :method-params ([lambda]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lambda]))}, bar-spec {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 240, :column 7, :end-line 240, :end-column 15, :arglists (quote ([data]))}, :name cljx.core/bar-spec, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 15, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, simulation-state {:name cljx.core/simulation-state, :file "src/cljs/cljx/core.cljs", :line 237, :column 1, :end-line 237, :end-column 22, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 237, :column 6, :end-line 237, :end-column 22}}, layout-interface {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 206, :column 7, :end-line 206, :end-column 23, :arglists (quote ([]))}, :name cljx.core/layout-interface, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, simulation-spec {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 251, :column 7, :end-line 251, :end-column 22, :arglists (quote ([{:keys [height data n], :or {height 200}}]))}, :name cljx.core/simulation-spec, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 22, :method-params ([p__8719]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [height data n], :or {height 200}}]))}, mean {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 9, :column 7, :end-line 9, :end-column 11, :arglists (quote ([xs]))}, :name cljx.core/mean, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 11, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, binomial-distribution {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 130, :column 7, :end-line 130, :end-column 28, :arglists (quote ([{:keys [n p]}]))}, :name cljx.core/binomial-distribution, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 28, :method-params ([p__8698]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [n p]}]))}, line-attributes {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 134, :column 7, :end-line 134, :end-column 22, :arglists (quote ([values color]))}, :name cljx.core/line-attributes, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 22, :method-params ([values color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 2, :fn-var true, :arglists (quote ([values color]))}, exponential-distribution {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 16, :column 7, :end-line 16, :end-column 31, :arglists (quote ([lambda]))}, :name cljx.core/exponential-distribution, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 31, :method-params ([lambda]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lambda]))}, new-sample {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 73, :column 7, :end-line 73, :end-column 17, :arglists (quote ([state]))}, :name cljx.core/new-sample, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, single-beta-controllers {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 76, :column 7, :end-line 76, :end-column 30, :arglists (quote ([state]))}, :name cljx.core/single-beta-controllers, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 30, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, multi-spec {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 139, :column 7, :end-line 139, :end-column 17, :arglists (quote ([{:keys [height data colors], :or {height 200, data []}}]))}, :name cljx.core/multi-spec, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 17, :method-params ([p__8705]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [height data colors], :or {height 200, data []}}]))}, range-controller {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 57, :column 7, :end-line 57, :end-column 23, :arglists (quote ([{:keys [range label state key-path disabled], :or {disabled false}}]))}, :name cljx.core/range-controller, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 23, :method-params ([p__8688]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [range label state key-path disabled], :or {disabled false}}]))}, binomial-chart {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 196, :column 7, :end-line 196, :end-column 21, :arglists (quote ([state]))}, :name cljx.core/binomial-chart, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 21, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, state {:name cljx.core/state, :file "src/cljs/cljx/core.cljs", :line 36, :column 1, :end-line 36, :end-column 11, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 36, :column 6, :end-line 36, :end-column 11}}, update-sample! {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 33, :column 7, :end-line 33, :end-column 21, :arglists (quote ([state]))}, :name cljx.core/update-sample!, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 21, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, chart {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 187, :column 7, :end-line 187, :end-column 12, :arglists (quote ([state]))}, :name cljx.core/chart, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 12, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, set-derived! {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 50, :column 7, :end-line 50, :end-column 19, :arglists (quote ([{:keys [k n], :as state}]))}, :name cljx.core/set-derived!, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 19, :method-params ([p__8677]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [k n], :as state}]))}, update-sample {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 19, :column 7, :end-line 19, :end-column 20, :arglists (quote ([{:keys [mean-a mean-b sample-size], :as state}]))}, :name cljx.core/update-sample, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 20, :method-params ([p__8671]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [mean-a mean-b sample-size], :as state}]))}, layout-binomial-interface {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 214, :column 7, :end-line 214, :end-column 32, :arglists (quote ([]))}, :name cljx.core/layout-binomial-interface, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, binomial {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 227, :column 7, :end-line 227, :end-column 15, :arglists (quote ([]))}, :name cljx.core/binomial, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, binomial-spec {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 163, :column 7, :end-line 163, :end-column 20, :arglists (quote ([{:keys [height data colors], :or {height 200, data []}}]))}, :name cljx.core/binomial-spec, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 20, :method-params ([p__8713]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [height data colors], :or {height 200, data []}}]))}, single-beta {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/core.cljs", :line 222, :column 7, :end-line 222, :end-column 18, :arglists (quote ([]))}, :name cljx.core/single-beta, :variadic false, :file "src/cljs/cljx/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:role :text-anchor :fieldset :min :stroke :beta :disabled :y-axis :offset :layout :content :div.large-6.medium-8.small-5.columns :grid :n :div.medium-7.medium-pull-5.columns :fill :value :width :bar-width :legend :pos :type :colors :sample-size :state :a.button :minor-y :on-click :k :div :mean-a :sample-a :major :label-dist :attribs :div.row :label.right :stroke-width :max :div.large-7.large-pull-5.columns :label :values :label-style :alpha :form :minor :div.medium-5.medium-push-7.columns :domain :input :mean-b :sample-mean-a :trials :on-change :x-axis :key-path :div.large-6.medium-4.small-7.columns :p :div.large-5.large-push-7.columns :sample-b :range :height :sample-mean-b :data}, :order [:mean-a :mean-b :sample-size :sample-a :sample-b :sample-mean-a :sample-mean-b :beta :n :k :alpha :range :label :state :key-path :disabled :div.row :div.large-6.medium-4.small-7.columns :label.right :div.large-6.medium-8.small-5.columns :input :type :value :min :max :on-change :a.button :role :on-click :form :fieldset :legend :p :values :attribs :layout :fill :stroke :height :data :colors :x-axis :y-axis :grid :domain :major :minor :pos :label-dist :label-style :text-anchor :minor-y :width :div :div.medium-5.medium-push-7.columns :div.medium-7.medium-pull-5.columns :content :div.large-5.large-push-7.columns :div.large-7.large-pull-5.columns :trials :bar-width :offset :stroke-width]}, :doc nil}