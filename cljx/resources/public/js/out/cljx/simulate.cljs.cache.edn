{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name cljx.simulate, :imports nil, :requires {r reagent.core, reagent.core reagent.core, viz thi.ng.geom.viz.core, thi.ng.geom.viz.core thi.ng.geom.viz.core, m thi.ng.math.core, thi.ng.math.core thi.ng.math.core, svg thi.ng.geom.svg.core, thi.ng.geom.svg.core thi.ng.geom.svg.core}, :uses {PI thi.ng.math.core}, :defs {n {:name cljx.simulate/n, :file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :line 6, :column 1, :end-line 6, :end-column 7, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :line 6, :column 6, :end-line 6, :end-column 7}}, state {:name cljx.simulate/state, :file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :line 8, :column 1, :end-line 8, :end-column 11, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :line 8, :column 6, :end-line 8, :end-column 11}}, bernoulli-trial {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :line 11, :column 7, :end-line 11, :end-column 22, :arglists (quote ([n]))}, :name cljx.simulate/bernoulli-trial, :variadic false, :file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, bar-spec {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :line 14, :column 7, :end-line 14, :end-column 15, :arglists (quote ([num width]))}, :name cljx.simulate/bar-spec, :variadic false, :file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :end-column 15, :method-params ([num width]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([num width]))}, viz-spec {:name cljx.simulate/viz-spec, :file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :line 25, :column 1, :end-line 25, :end-column 14, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :line 25, :column 6, :end-line 25, :end-column 14}}, svg-histogram-plot {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :line 42, :column 7, :end-line 42, :end-column 25, :arglists (quote ([data]))}, :name cljx.simulate/svg-histogram-plot, :variadic false, :file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :end-column 25, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, layout-binomial-simulation-interface {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :line 50, :column 7, :end-line 50, :end-column 43, :arglists (quote ([]))}, :name cljx.simulate/layout-binomial-simulation-interface, :variadic false, :file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :end-column 43, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, run {:protocol-inline nil, :meta {:file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :line 56, :column 7, :end-line 56, :end-column 10, :arglists (quote ([]))}, :name cljx.simulate/run, :variadic false, :file "/Users/henry/Dropbox/Talks/clojurex-2016/cljx/src/cljs/cljx/simulate.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:text-anchor :stroke :interleave :timer :y-axis :offset :layout :grid :width :bar-width :pos :minor-y :div :major :label-dist :attribs :stroke-width :label :values :label-style :minor :domain :trials :x-axis :range :height :data}, :order [:trials :values :attribs :layout :interleave :bar-width :offset :stroke :stroke-width :x-axis :y-axis :grid :domain :range :major :pos :label :minor :label-dist :label-style :text-anchor :minor-y :data :div :width :height :timer]}, :doc nil}